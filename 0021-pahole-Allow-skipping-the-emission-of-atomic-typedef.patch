From 3836623af1b5ff1f5869f8db75f564dccdda00fa Mon Sep 17 00:00:00 2001
From: Arnaldo Carvalho de Melo <acme@redhat.com>
Date: Thu, 13 Oct 2022 13:29:42 -0300
Subject: [PATCH 21/55] pahole: Allow skipping the emission of atomic typedefs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Just in case we find some compiler that doesn't like pahole generating
those typedefs, that are not present in the DWARF info at least with gcc
12.

Testing it:

  $ type=oftable ; pahole -C $type --compile eelco/ovs-vswitchd_rhel8   > vswitchd_rhel8.c ; echo "static struct ${type} data;" >> vswitchd_rhel8.c ; gcc -g -c vswitchd_rhel8.c -o vswitchd_rhel8.o |& head
  $ grep "typedef _Atomic " vswitchd_rhel8.c
  typedef _Atomic unsigned long atomic_ulong;
  $ type=oftable ; pahole --skip_emitting_atomic_typedefs -C $type --compile eelco/ovs-vswitchd_rhel8   > vswitchd_rhel8.c ; echo "static struct ${type} data;" >> vswitchd_rhel8.c ; gcc -g -c vswitchd_rhel8.c -o vswitchd_rhel8.o |& head
  vswitchd_rhel8.c:155:9: error: unknown type name ‘atomic_ulong’
    155 |         atomic_ulong               n_matched;            /*   224     8 */
        |         ^~~~~~~~~~~~
  vswitchd_rhel8.c:156:9: error: unknown type name ‘atomic_ulong’
    156 |         atomic_ulong               n_missed;             /*   232     8 */
        |         ^~~~~~~~~~~~
  $

Signed-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>
---
 man-pages/pahole.1 | 8 ++++++++
 pahole.c           | 8 ++++++++
 2 files changed, 16 insertions(+)

diff --git a/man-pages/pahole.1 b/man-pages/pahole.1
index 45a21af..7460104 100644
--- a/man-pages/pahole.1
+++ b/man-pages/pahole.1
@@ -121,6 +121,14 @@ Produces a header that can be included in a C source file and built. In
 the example provided it will use the BTF info if available, otherwise will
 look for a DWARF file matching the running kernel build-id.
 
+.TP
+.B \-\-skip_emitting_atomic_typedefs
+Do not emit 'typedef _Atomic int atomic_int' & friends when used with options
+like --compile. Use it if the compiler provides these already, as of circa
+2022 with gcc 12.2.1 those are not encoded in DWARF so to generate compilable
+code we need emit those typedefs for the atomic types used in the data structures
+being emitted from debugging information.
+
 .TP
 .B \-\-count=COUNT
 Pretty print the first COUNT records from input.
diff --git a/pahole.c b/pahole.c
index 8261171..4ddf21f 100644
--- a/pahole.c
+++ b/pahole.c
@@ -1221,6 +1221,7 @@ ARGP_PROGRAM_VERSION_HOOK_DEF = dwarves_print_version;
 #define ARGP_languages		   335
 #define ARGP_languages_exclude	   336
 #define ARGP_skip_encoding_btf_enum64 337
+#define ARGP_skip_emitting_atomic_typedefs 338
 
 static const struct argp_option pahole__options[] = {
 	{
@@ -1628,6 +1629,11 @@ static const struct argp_option pahole__options[] = {
 		.key  = ARGP_skip_encoding_btf_enum64,
 		.doc  = "Do not encode ENUM64sin BTF."
 	},
+	{
+		.name = "skip_emitting_atomic_typedefs",
+		.key  = ARGP_skip_emitting_atomic_typedefs,
+		.doc  = "Do not emit 'typedef _Atomic int atomic_int' & friends."
+	},
 	{
 		.name = NULL,
 	}
@@ -1795,6 +1801,8 @@ static error_t pahole__options_parser(int key, char *arg,
 		languages.str = arg;			break;
 	case ARGP_skip_encoding_btf_enum64:
 		conf_load.skip_encoding_btf_enum64 = true;	break;
+	case ARGP_skip_emitting_atomic_typedefs:
+		conf.skip_emitting_atomic_typedefs = true;	break;
 	default:
 		return ARGP_ERR_UNKNOWN;
 	}
-- 
2.40.0.rc2

