From 6fdb0140692acff01a2b53a0a958010b63d67fd6 Mon Sep 17 00:00:00 2001
From: David Lamparter <equinox@diac24.net>
Date: Thu, 7 Jul 2022 10:42:52 +0200
Subject: [PATCH 05/55] dwarves: support DW_TAG_atomic_type

Throwing userspace programs with atomic types at pahole currently
results in either odd results (struct fiels with zero length) or
straight up segfaults (dereferencing a NULL tag).

Add DW_TAG_atomic_type analogous to DW_TAG_volatile_type (which it
behaves identically to.)

Committer notes:

Define DW_TAG_atomic_type to get this to build in older systems.

Signed-off-by: David Lamparter <equinox@diac24.net>
---
 dwarf_loader.c    |  4 +++-
 dwarves.c         |  3 ++-
 dwarves.h         | 13 ++++++++++++-
 dwarves_emit.c    |  1 +
 dwarves_fprintf.c |  3 +++
 5 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/dwarf_loader.c b/dwarf_loader.c
index c2ad2a0..631bbd4 100644
--- a/dwarf_loader.c
+++ b/dwarf_loader.c
@@ -782,7 +782,8 @@ static int tag__recode_dwarf_bitfield(struct tag *tag, struct cu *cu, uint16_t b
 		break;
 
 	case DW_TAG_const_type:
-	case DW_TAG_volatile_type: {
+	case DW_TAG_volatile_type:
+	case DW_TAG_atomic_type: {
 		const struct dwarf_tag *dtag = tag->priv;
 		struct dwarf_tag *dtype = dwarf_cu__find_type_by_ref(cu->priv, &dtag->type);
 
@@ -2002,6 +2003,7 @@ static struct tag *__die__process_tag(Dwarf_Die *die, struct cu *cu,
 	case DW_TAG_restrict_type:
 	case DW_TAG_unspecified_type:
 	case DW_TAG_volatile_type:
+	case DW_TAG_atomic_type:
 		tag = die__create_new_tag(die, cu);		break;
 	case DW_TAG_pointer_type:
 		tag = die__create_new_pointer_tag(die, cu, conf);	break;
diff --git a/dwarves.c b/dwarves.c
index 394a815..9589747 100644
--- a/dwarves.c
+++ b/dwarves.c
@@ -388,7 +388,8 @@ reevaluate:
 		case DW_TAG_const_type:
 		case DW_TAG_typedef:
 		case DW_TAG_rvalue_reference_type:
-		case DW_TAG_volatile_type: {
+		case DW_TAG_volatile_type:
+		case DW_TAG_atomic_type: {
 			struct tag *tag = cu__type(cu, type->type);
 			if (tag == NULL) {
 				tag__id_not_found_fprintf(stderr, type->type);
diff --git a/dwarves.h b/dwarves.h
index bec9f08..d00c828 100644
--- a/dwarves.h
+++ b/dwarves.h
@@ -488,6 +488,11 @@ static inline bool tag__is_volatile(const struct tag *tag)
 	return tag->tag == DW_TAG_volatile_type;
 }
 
+static inline bool tag__is_atomic(const struct tag *tag)
+{
+	return tag->tag == DW_TAG_atomic_type;
+}
+
 static inline bool tag__is_restrict(const struct tag *tag)
 {
 	return tag->tag == DW_TAG_restrict_type;
@@ -497,7 +502,8 @@ static inline int tag__is_modifier(const struct tag *tag)
 {
 	return tag__is_const(tag) ||
 	       tag__is_volatile(tag) ||
-	       tag__is_restrict(tag);
+	       tag__is_restrict(tag) ||
+	       tag__is_atomic(tag);
 }
 
 static inline bool tag__has_namespace(const struct tag *tag)
@@ -540,6 +546,7 @@ static inline int tag__is_tag_type(const struct tag *tag)
 	       tag->tag == DW_TAG_subroutine_type ||
 	       tag->tag == DW_TAG_unspecified_type ||
 	       tag->tag == DW_TAG_volatile_type ||
+	       tag->tag == DW_TAG_atomic_type ||
 	       tag->tag == DW_TAG_LLVM_annotation;
 }
 
@@ -1398,6 +1405,10 @@ extern bool no_bitfield_type_recode;
 
 extern const char tabs[];
 
+#ifndef DW_TAG_atomic_type
+#define DW_TAG_atomic_type 0x47
+#endif
+
 #ifndef DW_TAG_skeleton_unit
 #define DW_TAG_skeleton_unit 0x4a
 #endif
diff --git a/dwarves_emit.c b/dwarves_emit.c
index 7d90d42..0731cec 100644
--- a/dwarves_emit.c
+++ b/dwarves_emit.c
@@ -268,6 +268,7 @@ next_indirection:
 	case DW_TAG_array_type:
 	case DW_TAG_const_type:
 	case DW_TAG_volatile_type:
+	case DW_TAG_atomic_type:
 		type = cu__type(cu, type->type);
 		if (type == NULL)
 			return 0;
diff --git a/dwarves_fprintf.c b/dwarves_fprintf.c
index ce64c79..a3193eb 100644
--- a/dwarves_fprintf.c
+++ b/dwarves_fprintf.c
@@ -93,6 +93,7 @@ static const char *dwarf_tag_names[] = {
 	[DW_TAG_skeleton_unit]		  = "skeleton_unit",
 	[DW_TAG_immutable_type]		  = "immutable_type",
 #endif
+	[DW_TAG_atomic_type]		  = "atomic_type",
 };
 
 static const char *dwarf_gnu_tag_names[] = {
@@ -566,6 +567,7 @@ static const char *__tag__name(const struct tag *tag, const struct cu *cu,
 	case DW_TAG_volatile_type:
 	case DW_TAG_const_type:
 	case DW_TAG_restrict_type:
+	case DW_TAG_atomic_type:
 	case DW_TAG_unspecified_type:
 		type = cu__type(cu, tag->type);
 		if (type == NULL && tag->type != 0)
@@ -580,6 +582,7 @@ static const char *__tag__name(const struct tag *tag, const struct cu *cu,
 			case DW_TAG_volatile_type: prefix = "volatile "; break;
 			case DW_TAG_const_type:    prefix = "const ";	 break;
 			case DW_TAG_restrict_type: suffix = " restrict"; break;
+			case DW_TAG_atomic_type:   prefix = "_Atomic ";  break;
 			}
 			snprintf(bf, len, "%s%s%s ", prefix, type_str, suffix);
 		}
-- 
2.40.0.rc2

